// Code generated by Kitex v0.4.4. DO NOT EDIT.

package interactsvr

import (
	"context"
	interact "dousheng/kitex_gen/interact"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return interactSvrServiceInfo
}

var interactSvrServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "InteractSvr"
	handlerType := (*interact.InteractSvr)(nil)
	methods := map[string]kitex.MethodInfo{
		"Fav":         kitex.NewMethodInfo(favHandler, newFavArgs, newFavResult, false),
		"FavList":     kitex.NewMethodInfo(favListHandler, newFavListArgs, newFavListResult, false),
		"Comment":     kitex.NewMethodInfo(commentHandler, newCommentArgs, newCommentResult, false),
		"CommentList": kitex.NewMethodInfo(commentListHandler, newCommentListArgs, newCommentListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "interact",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func favHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interact.DouyinFavoriteActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interact.InteractSvr).Fav(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FavArgs:
		success, err := handler.(interact.InteractSvr).Fav(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FavResult)
		realResult.Success = success
	}
	return nil
}
func newFavArgs() interface{} {
	return &FavArgs{}
}

func newFavResult() interface{} {
	return &FavResult{}
}

type FavArgs struct {
	Req *interact.DouyinFavoriteActionRequest
}

func (p *FavArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interact.DouyinFavoriteActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FavArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FavArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FavArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FavArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FavArgs) Unmarshal(in []byte) error {
	msg := new(interact.DouyinFavoriteActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FavArgs_Req_DEFAULT *interact.DouyinFavoriteActionRequest

func (p *FavArgs) GetReq() *interact.DouyinFavoriteActionRequest {
	if !p.IsSetReq() {
		return FavArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FavArgs) IsSetReq() bool {
	return p.Req != nil
}

type FavResult struct {
	Success *interact.DouyinFavoriteActionResponse
}

var FavResult_Success_DEFAULT *interact.DouyinFavoriteActionResponse

func (p *FavResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interact.DouyinFavoriteActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FavResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FavResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FavResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FavResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FavResult) Unmarshal(in []byte) error {
	msg := new(interact.DouyinFavoriteActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FavResult) GetSuccess() *interact.DouyinFavoriteActionResponse {
	if !p.IsSetSuccess() {
		return FavResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FavResult) SetSuccess(x interface{}) {
	p.Success = x.(*interact.DouyinFavoriteActionResponse)
}

func (p *FavResult) IsSetSuccess() bool {
	return p.Success != nil
}

func favListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interact.DouyinFavoriteListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interact.InteractSvr).FavList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FavListArgs:
		success, err := handler.(interact.InteractSvr).FavList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FavListResult)
		realResult.Success = success
	}
	return nil
}
func newFavListArgs() interface{} {
	return &FavListArgs{}
}

func newFavListResult() interface{} {
	return &FavListResult{}
}

type FavListArgs struct {
	Req *interact.DouyinFavoriteListRequest
}

func (p *FavListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interact.DouyinFavoriteListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FavListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FavListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FavListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FavListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FavListArgs) Unmarshal(in []byte) error {
	msg := new(interact.DouyinFavoriteListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FavListArgs_Req_DEFAULT *interact.DouyinFavoriteListRequest

func (p *FavListArgs) GetReq() *interact.DouyinFavoriteListRequest {
	if !p.IsSetReq() {
		return FavListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FavListArgs) IsSetReq() bool {
	return p.Req != nil
}

type FavListResult struct {
	Success *interact.DouyinFavoriteListResponse
}

var FavListResult_Success_DEFAULT *interact.DouyinFavoriteListResponse

func (p *FavListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interact.DouyinFavoriteListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FavListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FavListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FavListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FavListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FavListResult) Unmarshal(in []byte) error {
	msg := new(interact.DouyinFavoriteListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FavListResult) GetSuccess() *interact.DouyinFavoriteListResponse {
	if !p.IsSetSuccess() {
		return FavListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FavListResult) SetSuccess(x interface{}) {
	p.Success = x.(*interact.DouyinFavoriteListResponse)
}

func (p *FavListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func commentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interact.DouyinCommentActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interact.InteractSvr).Comment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CommentArgs:
		success, err := handler.(interact.InteractSvr).Comment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentResult)
		realResult.Success = success
	}
	return nil
}
func newCommentArgs() interface{} {
	return &CommentArgs{}
}

func newCommentResult() interface{} {
	return &CommentResult{}
}

type CommentArgs struct {
	Req *interact.DouyinCommentActionRequest
}

func (p *CommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interact.DouyinCommentActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CommentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CommentArgs) Unmarshal(in []byte) error {
	msg := new(interact.DouyinCommentActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentArgs_Req_DEFAULT *interact.DouyinCommentActionRequest

func (p *CommentArgs) GetReq() *interact.DouyinCommentActionRequest {
	if !p.IsSetReq() {
		return CommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentArgs) IsSetReq() bool {
	return p.Req != nil
}

type CommentResult struct {
	Success *interact.DouyinCommentActionResponse
}

var CommentResult_Success_DEFAULT *interact.DouyinCommentActionResponse

func (p *CommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interact.DouyinCommentActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CommentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CommentResult) Unmarshal(in []byte) error {
	msg := new(interact.DouyinCommentActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentResult) GetSuccess() *interact.DouyinCommentActionResponse {
	if !p.IsSetSuccess() {
		return CommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*interact.DouyinCommentActionResponse)
}

func (p *CommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interact.DouyinCommentListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interact.InteractSvr).CommentList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CommentListArgs:
		success, err := handler.(interact.InteractSvr).CommentList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentListResult)
		realResult.Success = success
	}
	return nil
}
func newCommentListArgs() interface{} {
	return &CommentListArgs{}
}

func newCommentListResult() interface{} {
	return &CommentListResult{}
}

type CommentListArgs struct {
	Req *interact.DouyinCommentListRequest
}

func (p *CommentListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interact.DouyinCommentListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CommentListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CommentListArgs) Unmarshal(in []byte) error {
	msg := new(interact.DouyinCommentListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentListArgs_Req_DEFAULT *interact.DouyinCommentListRequest

func (p *CommentListArgs) GetReq() *interact.DouyinCommentListRequest {
	if !p.IsSetReq() {
		return CommentListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentListArgs) IsSetReq() bool {
	return p.Req != nil
}

type CommentListResult struct {
	Success *interact.DouyinCommentListResponse
}

var CommentListResult_Success_DEFAULT *interact.DouyinCommentListResponse

func (p *CommentListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interact.DouyinCommentListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CommentListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CommentListResult) Unmarshal(in []byte) error {
	msg := new(interact.DouyinCommentListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentListResult) GetSuccess() *interact.DouyinCommentListResponse {
	if !p.IsSetSuccess() {
		return CommentListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentListResult) SetSuccess(x interface{}) {
	p.Success = x.(*interact.DouyinCommentListResponse)
}

func (p *CommentListResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Fav(ctx context.Context, Req *interact.DouyinFavoriteActionRequest) (r *interact.DouyinFavoriteActionResponse, err error) {
	var _args FavArgs
	_args.Req = Req
	var _result FavResult
	if err = p.c.Call(ctx, "Fav", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavList(ctx context.Context, Req *interact.DouyinFavoriteListRequest) (r *interact.DouyinFavoriteListResponse, err error) {
	var _args FavListArgs
	_args.Req = Req
	var _result FavListResult
	if err = p.c.Call(ctx, "FavList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Comment(ctx context.Context, Req *interact.DouyinCommentActionRequest) (r *interact.DouyinCommentActionResponse, err error) {
	var _args CommentArgs
	_args.Req = Req
	var _result CommentResult
	if err = p.c.Call(ctx, "Comment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, Req *interact.DouyinCommentListRequest) (r *interact.DouyinCommentListResponse, err error) {
	var _args CommentListArgs
	_args.Req = Req
	var _result CommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
