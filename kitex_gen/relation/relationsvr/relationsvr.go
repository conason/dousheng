// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationsvr

import (
	"context"
	relation "dousheng/kitex_gen/relation"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationSvrServiceInfo
}

var relationSvrServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationSvr"
	handlerType := (*relation.RelationSvr)(nil)
	methods := map[string]kitex.MethodInfo{
		"Sub":        kitex.NewMethodInfo(subHandler, newSubArgs, newSubResult, false),
		"SubList":    kitex.NewMethodInfo(subListHandler, newSubListArgs, newSubListResult, false),
		"FansList":   kitex.NewMethodInfo(fansListHandler, newFansListArgs, newFansListResult, false),
		"FriendList": kitex.NewMethodInfo(friendListHandler, newFriendListArgs, newFriendListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func subHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.DouyinRelationActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationSvr).Sub(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SubArgs:
		success, err := handler.(relation.RelationSvr).Sub(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SubResult)
		realResult.Success = success
	}
	return nil
}
func newSubArgs() interface{} {
	return &SubArgs{}
}

func newSubResult() interface{} {
	return &SubResult{}
}

type SubArgs struct {
	Req *relation.DouyinRelationActionRequest
}

func (p *SubArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.DouyinRelationActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SubArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SubArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SubArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in SubArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *SubArgs) Unmarshal(in []byte) error {
	msg := new(relation.DouyinRelationActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SubArgs_Req_DEFAULT *relation.DouyinRelationActionRequest

func (p *SubArgs) GetReq() *relation.DouyinRelationActionRequest {
	if !p.IsSetReq() {
		return SubArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SubArgs) IsSetReq() bool {
	return p.Req != nil
}

type SubResult struct {
	Success *relation.DouyinRelationActionResponse
}

var SubResult_Success_DEFAULT *relation.DouyinRelationActionResponse

func (p *SubResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.DouyinRelationActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SubResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SubResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SubResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in SubResult")
	}
	return proto.Marshal(p.Success)
}

func (p *SubResult) Unmarshal(in []byte) error {
	msg := new(relation.DouyinRelationActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SubResult) GetSuccess() *relation.DouyinRelationActionResponse {
	if !p.IsSetSuccess() {
		return SubResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SubResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.DouyinRelationActionResponse)
}

func (p *SubResult) IsSetSuccess() bool {
	return p.Success != nil
}

func subListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.DouyinRelationFollowListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationSvr).SubList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SubListArgs:
		success, err := handler.(relation.RelationSvr).SubList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SubListResult)
		realResult.Success = success
	}
	return nil
}
func newSubListArgs() interface{} {
	return &SubListArgs{}
}

func newSubListResult() interface{} {
	return &SubListResult{}
}

type SubListArgs struct {
	Req *relation.DouyinRelationFollowListRequest
}

func (p *SubListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.DouyinRelationFollowListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SubListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SubListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SubListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in SubListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *SubListArgs) Unmarshal(in []byte) error {
	msg := new(relation.DouyinRelationFollowListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SubListArgs_Req_DEFAULT *relation.DouyinRelationFollowListRequest

func (p *SubListArgs) GetReq() *relation.DouyinRelationFollowListRequest {
	if !p.IsSetReq() {
		return SubListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SubListArgs) IsSetReq() bool {
	return p.Req != nil
}

type SubListResult struct {
	Success *relation.DouyinRelationFollowListResponse
}

var SubListResult_Success_DEFAULT *relation.DouyinRelationFollowListResponse

func (p *SubListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.DouyinRelationFollowListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SubListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SubListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SubListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in SubListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *SubListResult) Unmarshal(in []byte) error {
	msg := new(relation.DouyinRelationFollowListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SubListResult) GetSuccess() *relation.DouyinRelationFollowListResponse {
	if !p.IsSetSuccess() {
		return SubListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SubListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.DouyinRelationFollowListResponse)
}

func (p *SubListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func fansListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.DouyinRelationFollowerListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationSvr).FansList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FansListArgs:
		success, err := handler.(relation.RelationSvr).FansList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FansListResult)
		realResult.Success = success
	}
	return nil
}
func newFansListArgs() interface{} {
	return &FansListArgs{}
}

func newFansListResult() interface{} {
	return &FansListResult{}
}

type FansListArgs struct {
	Req *relation.DouyinRelationFollowerListRequest
}

func (p *FansListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.DouyinRelationFollowerListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FansListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FansListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FansListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FansListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FansListArgs) Unmarshal(in []byte) error {
	msg := new(relation.DouyinRelationFollowerListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FansListArgs_Req_DEFAULT *relation.DouyinRelationFollowerListRequest

func (p *FansListArgs) GetReq() *relation.DouyinRelationFollowerListRequest {
	if !p.IsSetReq() {
		return FansListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FansListArgs) IsSetReq() bool {
	return p.Req != nil
}

type FansListResult struct {
	Success *relation.DouyinRelationFollowerListResponse
}

var FansListResult_Success_DEFAULT *relation.DouyinRelationFollowerListResponse

func (p *FansListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.DouyinRelationFollowerListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FansListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FansListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FansListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FansListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FansListResult) Unmarshal(in []byte) error {
	msg := new(relation.DouyinRelationFollowerListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FansListResult) GetSuccess() *relation.DouyinRelationFollowerListResponse {
	if !p.IsSetSuccess() {
		return FansListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FansListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.DouyinRelationFollowerListResponse)
}

func (p *FansListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func friendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.DouyinRelationFriendListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationSvr).FriendList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FriendListArgs:
		success, err := handler.(relation.RelationSvr).FriendList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FriendListResult)
		realResult.Success = success
	}
	return nil
}
func newFriendListArgs() interface{} {
	return &FriendListArgs{}
}

func newFriendListResult() interface{} {
	return &FriendListResult{}
}

type FriendListArgs struct {
	Req *relation.DouyinRelationFriendListRequest
}

func (p *FriendListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.DouyinRelationFriendListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FriendListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FriendListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FriendListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FriendListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FriendListArgs) Unmarshal(in []byte) error {
	msg := new(relation.DouyinRelationFriendListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FriendListArgs_Req_DEFAULT *relation.DouyinRelationFriendListRequest

func (p *FriendListArgs) GetReq() *relation.DouyinRelationFriendListRequest {
	if !p.IsSetReq() {
		return FriendListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FriendListArgs) IsSetReq() bool {
	return p.Req != nil
}

type FriendListResult struct {
	Success *relation.DouyinRelationFriendListResponse
}

var FriendListResult_Success_DEFAULT *relation.DouyinRelationFriendListResponse

func (p *FriendListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.DouyinRelationFriendListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FriendListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FriendListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FriendListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FriendListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FriendListResult) Unmarshal(in []byte) error {
	msg := new(relation.DouyinRelationFriendListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FriendListResult) GetSuccess() *relation.DouyinRelationFriendListResponse {
	if !p.IsSetSuccess() {
		return FriendListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FriendListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.DouyinRelationFriendListResponse)
}

func (p *FriendListResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Sub(ctx context.Context, Req *relation.DouyinRelationActionRequest) (r *relation.DouyinRelationActionResponse, err error) {
	var _args SubArgs
	_args.Req = Req
	var _result SubResult
	if err = p.c.Call(ctx, "Sub", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SubList(ctx context.Context, Req *relation.DouyinRelationFollowListRequest) (r *relation.DouyinRelationFollowListResponse, err error) {
	var _args SubListArgs
	_args.Req = Req
	var _result SubListResult
	if err = p.c.Call(ctx, "SubList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FansList(ctx context.Context, Req *relation.DouyinRelationFollowerListRequest) (r *relation.DouyinRelationFollowerListResponse, err error) {
	var _args FansListArgs
	_args.Req = Req
	var _result FansListResult
	if err = p.c.Call(ctx, "FansList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FriendList(ctx context.Context, Req *relation.DouyinRelationFriendListRequest) (r *relation.DouyinRelationFriendListResponse, err error) {
	var _args FriendListArgs
	_args.Req = Req
	var _result FriendListResult
	if err = p.c.Call(ctx, "FriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
