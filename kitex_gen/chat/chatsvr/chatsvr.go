// Code generated by Kitex v0.4.4. DO NOT EDIT.

package chatsvr

import (
	"context"
	chat "dousheng/kitex_gen/chat"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return chatSvrServiceInfo
}

var chatSvrServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ChatSvr"
	handlerType := (*chat.ChatSvr)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetMsg":  kitex.NewMethodInfo(getMsgHandler, newGetMsgArgs, newGetMsgResult, false),
		"PostMsg": kitex.NewMethodInfo(postMsgHandler, newPostMsgArgs, newPostMsgResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "chat",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getMsgHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(chat.DouyinRelationActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(chat.ChatSvr).GetMsg(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetMsgArgs:
		success, err := handler.(chat.ChatSvr).GetMsg(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMsgResult)
		realResult.Success = success
	}
	return nil
}
func newGetMsgArgs() interface{} {
	return &GetMsgArgs{}
}

func newGetMsgResult() interface{} {
	return &GetMsgResult{}
}

type GetMsgArgs struct {
	Req *chat.DouyinRelationActionRequest
}

func (p *GetMsgArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(chat.DouyinRelationActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetMsgArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetMsgArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetMsgArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetMsgArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetMsgArgs) Unmarshal(in []byte) error {
	msg := new(chat.DouyinRelationActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMsgArgs_Req_DEFAULT *chat.DouyinRelationActionRequest

func (p *GetMsgArgs) GetReq() *chat.DouyinRelationActionRequest {
	if !p.IsSetReq() {
		return GetMsgArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMsgArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetMsgResult struct {
	Success *chat.DouyinRelationActionResponse
}

var GetMsgResult_Success_DEFAULT *chat.DouyinRelationActionResponse

func (p *GetMsgResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(chat.DouyinRelationActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetMsgResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetMsgResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetMsgResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetMsgResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetMsgResult) Unmarshal(in []byte) error {
	msg := new(chat.DouyinRelationActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMsgResult) GetSuccess() *chat.DouyinRelationActionResponse {
	if !p.IsSetSuccess() {
		return GetMsgResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMsgResult) SetSuccess(x interface{}) {
	p.Success = x.(*chat.DouyinRelationActionResponse)
}

func (p *GetMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func postMsgHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(chat.DouyinMessageChatRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(chat.ChatSvr).PostMsg(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PostMsgArgs:
		success, err := handler.(chat.ChatSvr).PostMsg(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PostMsgResult)
		realResult.Success = success
	}
	return nil
}
func newPostMsgArgs() interface{} {
	return &PostMsgArgs{}
}

func newPostMsgResult() interface{} {
	return &PostMsgResult{}
}

type PostMsgArgs struct {
	Req *chat.DouyinMessageChatRequest
}

func (p *PostMsgArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(chat.DouyinMessageChatRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PostMsgArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PostMsgArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PostMsgArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in PostMsgArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *PostMsgArgs) Unmarshal(in []byte) error {
	msg := new(chat.DouyinMessageChatRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PostMsgArgs_Req_DEFAULT *chat.DouyinMessageChatRequest

func (p *PostMsgArgs) GetReq() *chat.DouyinMessageChatRequest {
	if !p.IsSetReq() {
		return PostMsgArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PostMsgArgs) IsSetReq() bool {
	return p.Req != nil
}

type PostMsgResult struct {
	Success *chat.DouyinMessageChatResponse
}

var PostMsgResult_Success_DEFAULT *chat.DouyinMessageChatResponse

func (p *PostMsgResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(chat.DouyinMessageChatResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PostMsgResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PostMsgResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PostMsgResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in PostMsgResult")
	}
	return proto.Marshal(p.Success)
}

func (p *PostMsgResult) Unmarshal(in []byte) error {
	msg := new(chat.DouyinMessageChatResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PostMsgResult) GetSuccess() *chat.DouyinMessageChatResponse {
	if !p.IsSetSuccess() {
		return PostMsgResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PostMsgResult) SetSuccess(x interface{}) {
	p.Success = x.(*chat.DouyinMessageChatResponse)
}

func (p *PostMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetMsg(ctx context.Context, Req *chat.DouyinRelationActionRequest) (r *chat.DouyinRelationActionResponse, err error) {
	var _args GetMsgArgs
	_args.Req = Req
	var _result GetMsgResult
	if err = p.c.Call(ctx, "GetMsg", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PostMsg(ctx context.Context, Req *chat.DouyinMessageChatRequest) (r *chat.DouyinMessageChatResponse, err error) {
	var _args PostMsgArgs
	_args.Req = Req
	var _result PostMsgResult
	if err = p.c.Call(ctx, "PostMsg", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
