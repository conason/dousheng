// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"tk/dao/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newRelation(db *gorm.DB, opts ...gen.DOOption) relation {
	_relation := relation{}

	_relation.relationDo.UseDB(db, opts...)
	_relation.relationDo.UseModel(&model.Relation{})

	tableName := _relation.relationDo.TableName()
	_relation.ALL = field.NewAsterisk(tableName)
	_relation.RelationID = field.NewInt64(tableName, "relation_id")
	_relation.FollowerID = field.NewInt64(tableName, "follower_id")
	_relation.FollowingID = field.NewInt64(tableName, "following_id")
	_relation.Isdeleted = field.NewInt32(tableName, "isdeleted")
	_relation.CreateTime = field.NewTime(tableName, "create_time")

	_relation.fillFieldMap()

	return _relation
}

type relation struct {
	relationDo

	ALL         field.Asterisk
	RelationID  field.Int64 // 关注id
	FollowerID  field.Int64 // 粉丝id
	FollowingID field.Int64 // 博主id
	Isdeleted   field.Int32 // 取消关注
	CreateTime  field.Time  // 创建时间

	fieldMap map[string]field.Expr
}

func (r relation) Table(newTableName string) *relation {
	r.relationDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r relation) As(alias string) *relation {
	r.relationDo.DO = *(r.relationDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *relation) updateTableName(table string) *relation {
	r.ALL = field.NewAsterisk(table)
	r.RelationID = field.NewInt64(table, "relation_id")
	r.FollowerID = field.NewInt64(table, "follower_id")
	r.FollowingID = field.NewInt64(table, "following_id")
	r.Isdeleted = field.NewInt32(table, "isdeleted")
	r.CreateTime = field.NewTime(table, "create_time")

	r.fillFieldMap()

	return r
}

func (r *relation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *relation) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["relation_id"] = r.RelationID
	r.fieldMap["follower_id"] = r.FollowerID
	r.fieldMap["following_id"] = r.FollowingID
	r.fieldMap["isdeleted"] = r.Isdeleted
	r.fieldMap["create_time"] = r.CreateTime
}

func (r relation) clone(db *gorm.DB) relation {
	r.relationDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r relation) replaceDB(db *gorm.DB) relation {
	r.relationDo.ReplaceDB(db)
	return r
}

type relationDo struct{ gen.DO }

func (r relationDo) Debug() *relationDo {
	return r.withDO(r.DO.Debug())
}

func (r relationDo) WithContext(ctx context.Context) *relationDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r relationDo) ReadDB() *relationDo {
	return r.Clauses(dbresolver.Read)
}

func (r relationDo) WriteDB() *relationDo {
	return r.Clauses(dbresolver.Write)
}

func (r relationDo) Session(config *gorm.Session) *relationDo {
	return r.withDO(r.DO.Session(config))
}

func (r relationDo) Clauses(conds ...clause.Expression) *relationDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r relationDo) Returning(value interface{}, columns ...string) *relationDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r relationDo) Not(conds ...gen.Condition) *relationDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r relationDo) Or(conds ...gen.Condition) *relationDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r relationDo) Select(conds ...field.Expr) *relationDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r relationDo) Where(conds ...gen.Condition) *relationDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r relationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *relationDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r relationDo) Order(conds ...field.Expr) *relationDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r relationDo) Distinct(cols ...field.Expr) *relationDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r relationDo) Omit(cols ...field.Expr) *relationDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r relationDo) Join(table schema.Tabler, on ...field.Expr) *relationDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r relationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *relationDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r relationDo) RightJoin(table schema.Tabler, on ...field.Expr) *relationDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r relationDo) Group(cols ...field.Expr) *relationDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r relationDo) Having(conds ...gen.Condition) *relationDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r relationDo) Limit(limit int) *relationDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r relationDo) Offset(offset int) *relationDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r relationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *relationDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r relationDo) Unscoped() *relationDo {
	return r.withDO(r.DO.Unscoped())
}

func (r relationDo) Create(values ...*model.Relation) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r relationDo) CreateInBatches(values []*model.Relation, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r relationDo) Save(values ...*model.Relation) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r relationDo) First() (*model.Relation, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Relation), nil
	}
}

func (r relationDo) Take() (*model.Relation, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Relation), nil
	}
}

func (r relationDo) Last() (*model.Relation, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Relation), nil
	}
}

func (r relationDo) Find() ([]*model.Relation, error) {
	result, err := r.DO.Find()
	return result.([]*model.Relation), err
}

func (r relationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Relation, err error) {
	buf := make([]*model.Relation, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r relationDo) FindInBatches(result *[]*model.Relation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r relationDo) Attrs(attrs ...field.AssignExpr) *relationDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r relationDo) Assign(attrs ...field.AssignExpr) *relationDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r relationDo) Joins(fields ...field.RelationField) *relationDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r relationDo) Preload(fields ...field.RelationField) *relationDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r relationDo) FirstOrInit() (*model.Relation, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Relation), nil
	}
}

func (r relationDo) FirstOrCreate() (*model.Relation, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Relation), nil
	}
}

func (r relationDo) FindByPage(offset int, limit int) (result []*model.Relation, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r relationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r relationDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r relationDo) Delete(models ...*model.Relation) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *relationDo) withDO(do gen.Dao) *relationDo {
	r.DO = *do.(*gen.DO)
	return r
}
